from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from keyboards import admin_kb
from DataBase import sqlite_db
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

ID = None

# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    description = State()
    prise = State()
    schedule = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
# @dp.message_handler(commands=['moderator'], is_chat_admin=True)
async def make_changes_command (message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEHd0lj05BQjxtuwcbDo8HQ5HANryykEAACfQAD98zUGG_VX5-JRgiWLQQ')
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ê–¥–º–∏–Ω!', reply_markup=admin_kb)
    await message.delete()

# –î–∏–∞–ª–æ–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞(–ú–µ–Ω—é) + –∫–Ω–æ–ø–∫–∏
# @dp.message_handler(commands='–ú–µ–Ω—é(–ê–¥–º–∏–Ω)', state=None)
async def admin_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMAdmin.photo.set()
        await message.reply(f'<b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ</b>')

# –õ–æ–≤–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–ú–µ–Ω—é) + –º–∞—Å—Å–∏–≤(—Å–ª–æ–≤–∞—Ä—å)
# @dp.message_handler(content_types=['photo'], state=FSMAdmin.photo)
async def load_photo(message: types.Message, state=FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
            await FSMAdmin.next()
            await message.reply('<b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü–∏</b>')

# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–ú–µ–Ω—é) + —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state=FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['name'] = message.text
            await FSMAdmin.next()
            await message.reply('<b>–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Ü—Ü–∏</b>')

# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–ú–µ–Ω—é) + —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMAdmin.description)
async def load_description(message: types.Message, state=FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['description'] = message.text
            await FSMAdmin.next()
            await message.reply('<b>–ù–∞–ø–æ—Å–ª–µ–¥–æ–∫, –≤–≤–µ–¥–∏ —Ü–µ–Ω—É</b>')

# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ, —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–ú–µ–Ω—é) + —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMAdmin.prise)
async def load_price(message: types.Message, state=FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['price'] = float(message.text)
            
        await sqlite_db.sql_add_command(state)
        await state.finish()
        await bot.send_message(message.from_user.id, '<b>–ì–æ—Ç–æ–≤–æ!</b>, –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
        await sqlite_db.sql_result_state(message)


# –í—ã—Ö–æ–¥ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
# @dp.message_handler(state="*", commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals = '–æ—Ç–º–µ–Ω–∞', ignore_case = True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('–û–¢–ú–≠–ù–ê')

# @dp.callback_query_handler(Text(x.data and x.data.startswith('del ')))
async def delete_callback_db(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


# @dp.message_handler(commands = '–£–¥–∞–ª–∏—Ç—å(–ú–µ–Ω—é)')
async def delete_butt(message: types.Message):
    if message.from_user.id == ID:
        try:
            read = await sqlite_db.sql_read2()
            if read:
                for ret in read:
                    await bot.send_photo(message.from_user.id, ret[1], f'{ret[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[3]}\n–¶–µ–Ω–∞: {ret[-1]} –≥—Ä–Ω',
                                         reply_markup=InlineKeyboardMarkup(). \
                                         add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[2]}', callback_data=(f'del {ret[2]}'))))
            else:
                await bot.send_message(message.from_user.id, '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—åü§∑')
        except Exception as e:
            await bot.send_message(message.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')




# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers_admin ():
    dp.register_message_handler(admin_start, lambda message: message.text in '–ú–µ–Ω—é(–ê–¥–º–∏–Ω)', state=None)
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMAdmin.photo)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_description, state=FSMAdmin.description)
    dp.register_message_handler(load_price, state=FSMAdmin.prise)
    dp.register_message_handler(cancel_handler, state="*", commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals = '–æ—Ç–º–µ–Ω–∞', ignore_case = True), state="*")
    dp.register_message_handler(make_changes_command, commands=['moderator'], is_chat_admin=True)
    dp.register_callback_query_handler(delete_callback_db,lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(delete_butt, lambda message: message.text in '–£–¥–∞–ª–∏—Ç—å(–ú–µ–Ω—é)')

